// TYPOGRAPHY

@function em($target, $context: $base-font-size) 
  @if $target == 0
    @return 0 
  @return $target / $context + 0em

@mixin unselectable()
  -moz-user-select: -moz-none
  -khtml-user-select: none
  -webkit-user-select: none
  -ms-user-select: none
  user-select: none

// CSS3

@mixin background-gradient($startColor: #3C3C3C, $endColor: #999999) 
  background-color: $startColor
  background-image: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor))
  background-image: -webkit-linear-gradient(top, $startColor, $endColor)
  background-image: -moz-linear-gradient(top, $startColor, $endColor)
  background-image: -ms-linear-gradient(top, $startColor, $endColor)
  background-image: -o-linear-gradient(top, $startColor, $endColor)
  background-image: linear-gradient(top, $startColor, $endColor)
  filter: progid:DXImageTransform.Microsoft.gradient(startColorStr=$startColor, EndColorStr=$endColor)


@mixin background-size($width: 100%, $height: 100%) 
  -moz-background-size: $width $height
  -webkit-background-size: $width $height
  background-size: $width $height


@mixin border-radius($radius: 5px) 
  -moz-border-radius:    $radius
  -webkit-border-radius: $radius
  border-radius:         $radius

@mixin input-placeholder($color, $font-weight: normal)
  &::-webkit-input-placeholder
    color: $color
    font-weight: $font-weight
  &:-moz-placeholder
    color: $color
    font-weight: $font-weight
  &::-moz-placeholder
    color: $color
    font-weight: $font-weight
  &:-ms-input-placeholder
    color: $color
    font-weight: $font-weight

@mixin textarea-placeholder($color, $font-weight: normal)
  &::-webkit-input-placeholder
    color: $color
    font-weight: $font-weight
  &:-moz-placeholder
    color: $color
    font-weight: $font-weight
  &::-moz-placeholder
    color: $color
    font-weight: $font-weight
  &:-ms-input-placeholder
    color: $color
    font-weight: $font-weight

@mixin border-radius-separate($topLeftRadius: 5px, $topRightRadius: 5px, $bottomLeftRadius: 5px, $bottomRightRadius: 5px) 
  -webkit-border-top-left-radius:     $topLeftRadius
  -webkit-border-top-right-radius:    $topRightRadius
  -webkit-border-bottom-right-radius: $bottomLeftRadius
  -webkit-border-bottom-left-radius:  $bottomRightRadius

  -moz-border-radius-topleft:     $topLeftRadius
  -moz-border-radius-topright:    $topRightRadius
  -moz-border-radius-bottomright: $bottomLeftRadius
  -moz-border-radius-bottomleft:  $bottomRightRadius

  border-top-left-radius:     $topLeftRadius
  border-top-right-radius:    $topRightRadius
  border-bottom-right-radius: $bottomLeftRadius
  border-bottom-left-radius:  $bottomRightRadius

@mixin box($orient: horizontal, $pack: center, $align: center) 
  display: -webkit-box
  display: -moz-box
  display: box

  -webkit-box-orient: $orient
  -moz-box-orient:    $orient
  box-orient:         $orient

  -webkit-box-pack: $pack
  -moz-box-pack:    $pack
  box-pack:         $pack

  -webkit-box-align: $align
  -moz-box-align:    $align
  box-align:         $align

@mixin box-rgba($r: 60, $g: 3, $b: 12, $opacity: 0.23, $color: #3C3C3C)
  background-color: transparent
  background-color: rgba($r, $g, $b, $opacity)
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr#$color,endColorstr=$color)
  zoom: 1

@mixin blur($blur: 1px)
  -webkit-filter: blur($blur)
  -moz-filter: blur($blur)
  -ms-filter: blur($blur)
  -o-filter: blur($blur)
  filter: blur($blur)

@mixin disable-box-shadow() 
  -webkit-box-shadow: none
  -moz-box-shadow:    none
  box-shadow:         none

@mixin box-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4)) 
  -webkit-box-shadow: $x $y $blur $color
  -moz-box-shadow:    $x $y $blur $color
  box-shadow:         $x $y $blur $color

@mixin box-shadow-inset($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4)) 
  -webkit-box-shadow: inset $x $y $blur $color
  -moz-box-shadow:    inset $x $y $blur $color
  box-shadow:         inset $x $y $blur $color

@mixin double-box-shadow-inset($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4), $x2: 2px, $y2: 2px, $blur2: 5px, $color2: rgba(0,0,0,.4)) 
  -webkit-box-shadow: inset $x $y $blur $color, inset $x2 $y2 $blur2 $color2
  -moz-box-shadow:    inset $x $y $blur $color, inset $x2 $y2 $blur2 $color2
  box-shadow:         inset $x $y $blur $color, inset $x2 $y2 $blur2 $color2

@mixin box-shadow-inset-outset($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4), $x2: 2px, $y2: 2px, $blur2: 5px, $color2: rgba(0,0,0,.4)) 
  -webkit-box-shadow: inset $x $y $blur $color, $x2 $y2 $blur2 $color2
  -moz-box-shadow:    inset $x $y $blur $color, $x2 $y2 $blur2 $color2
  box-shadow:         inset $x $y $blur $color, $x2 $y2 $blur2 $color2

@mixin box-sizing($type: border-box) 
  -webkit-box-sizing:   $type
  -moz-box-sizing:      $type
  box-sizing:           $type

@mixin columns($count: 3, $gap: 10) 
  -webkit-column-count: $count
  -moz-column-count:    $count
  column-count:         $count

  -webkit-column-gap:   $gap
  -moz-column-gap:      $gap
  column-gap:           $gap

@mixin double-borders($colorOne: #3C3C3C, $colorTwo: #999999, $radius: 0) 
  border: 1px solid $colorOne

  -webkit-box-shadow: inset 0 0 0 1px $colorTwo
  -moz-box-shadow:    inset 0 0 0 1px $colorTwo
  box-shadow:         inset 0 0 0 1px $colorTwo

  @include border-radius( $radius )

@mixin flex($value: 1) 
  -webkit-box-flex: $value
  -moz-box-flex:    $value
  box-flex:         $value

@mixin flip($scaleX: -1) 
  -moz-transform:    scaleX($scaleX)
  -o-transform:      scaleX($scaleX)
  -webkit-transform: scaleX($scaleX)
  transform:         scaleX($scaleX)
  filter:            FlipH
  -ms-filter:        "FlipH"

@mixin opacity($opacity: 0.5) 
  filter:         alpha(opacity=($opacity * 100))
  -ms-filter:     "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + ($opacity * 100) + ")"
  -moz-opacity:   $opacity
  -khtml-opacity: $opacity
  opacity:        $opacity

@mixin outline-radius($radius: 5px) 
  -webkit-outline-radius: $radius
  -moz-outline-radius:    $radius
  outline-radius:         $radius


@mixin resize($direction: both) 
  -webkit-resize: $direction
  -moz-resize:    $direction
  resize:         $direction

@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) 
  -moz-transform: rotate($deg + deg)
  -o-transform: rotate($deg + deg)
  -webkit-transform: rotate($deg + deg)
  -ms-transform: rotate($deg + deg)
  transform: rotate($deg + deg)
  filter: progid:DXImageTransform.Microsoft.Matrix(M11=$m11, M12=$m12,M21=$m21, M22=$m22, sizingMethod='auto expand')
  zoom: 1

@mixin square($x)
  width: $x
  height: $x

@mixin text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4)) 
  text-shadow: $x $y $blur $color

@mixin transition($what: all, $length: 1s, $easing: ease-in-out) 
  -moz-transition:    $what $length $easing
  -o-transition:      $what $length $easing
  -webkit-transition: $what $length $easing
  -ms-transition:     $what $length $easing
  transition:         $what $length $easing


@mixin triple-borders($colorOne: #3C3C3C, $colorTwo: #999999, $colorThree: #000000, $radius: 0) 
  border: 1px solid $colorOne

  @include border-radius($radius)

  -webkit-box-shadow: 0 0 0 1px $colorTwo, 0 0 0 2px $colorThree
  -moz-box-shadow:    0 0 0 1px $colorTwo, 0 0 0 2px $colorThree
  box-shadow:         0 0 0 1px $colorTwo, 0 0 0 2px $colorThree









// ANIMATE 

@mixin set-experimental-support($moz: false, $webkit: false, $ms: false, $o: false, $khtml: false) 
  $experimental-support-for-mozilla: $moz
  $experimental-support-for-webkit: $webkit
  $experimental-support-for-microsoft: $ms
  $experimental-support-for-opera: $o
  $experimental-support-for-khtml: $khtml


@mixin with-only-support-for($moz: false, $webkit: false, $ms: false, $o: false, $khtml: false) 
  // Capture the current state
  $original-moz:   $experimental-support-for-mozilla
  $original-webkit:    $experimental-support-for-webkit
  $original-o:     $experimental-support-for-opera
  $original-ms: $experimental-support-for-microsoft
  $original-khtml:     $experimental-support-for-khtml

  @include set-experimental-support($moz, $webkit, $ms, $o, $khtml)

  @content

  @include set-experimental-support($original-moz, $original-webkit, $original-ms, $original-o, $original-khtml)


//
// CSS Animations.
//

// Apply an animation property and value with the correct browser support
@mixin animation-support($property, $value)
  @include experimental($property, $value, -moz, -webkit, -o, -ms, not -khtml, official) 

// Name of any animation as a string.
$default-animation-name : false !default

// Duration of the entire animation in seconds.
$default-animation-duration : false !default

// Delay for start of animation in seconds.
$default-animation-delay : false !default

// The timing function(s) to be used between keyframes. [ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier($number, $number, $number, $number)]
$default-animation-timing-function : false !default

// The number of times an animation cycle is played. [infinite | $number]
$default-animation-iteration-count : false !default

// Whether or not the animation should play in reverse on alternate cycles. [normal | alternate]
$default-animation-direction : false !default

// What values are applied by the animation outside the time it is executing. [none | forwards | backwards | both]
$default-animation-fill-mode : false !default

// Whether the animation is running or paused. [running | paused]
$default-animation-play-state : false !default

// Create a named animation sequence that can be applied to elements later.
//
//     $name    - The name of your animation.
//     @content - The keyframes of the animation.
@mixin keyframes($name,$moz: $experimental-support-for-mozilla,$webkit: $experimental-support-for-webkit,$o: $experimental-support-for-opera,$ms: $experimental-support-for-microsoft,$khtml: $experimental-support-for-khtml,$official: true) 
  @if $moz 
    @include with-only-support-for($moz: true) 
      @-moz-keyframes #$name  @content 
    
  @if $webkit 
    @include with-only-support-for($webkit: true) 
      @-webkit-keyframes #$name  @content 
    
  @if $o 
    @include with-only-support-for($o: true) 
      @-o-keyframes #$name  @content 
    
  @if $ms 
    @include with-only-support-for($ms: true) 
      @-ms-keyframes #$name  @content 
    
  @if $khtml 
    @include with-only-support-for($khtml: true) 
      @-khtml-keyframes #$name  @content 

  @if $official 
    @include with-only-support-for 
      @keyframes #$name  @content 
    
  
// Apply 1-10 animation names.
@mixin animation-name($name-1: $default-animation-name, $name-2: false, $name-3: false, $name-4: false, $name-5: false, $name-6: false, $name-7: false, $name-8: false, $name-9: false, $name-10: false) 
  $name: compact($name-1, $name-2, $name-3, $name-4, $name-5, $name-6, $name-7, $name-8, $name-9, $name-10)
  @include animation-support(animation-name, $name) 

// Apply 1-10 animation durations.
@mixin animation-duration($duration-1: $default-animation-duration, $duration-2: false, $duration-3: false, $duration-4: false, $duration-5: false, $duration-6: false, $duration-7: false, $duration-8: false, $duration-9: false, $duration-10: false) 
  $duration: compact($duration-1, $duration-2, $duration-3, $duration-4, $duration-5, $duration-6, $duration-7, $duration-8, $duration-9, $duration-10)
  @include animation-support(animation-duration, $duration) 

// Apply 1-10 animation delays.
@mixin animation-delay($delay-1: $default-animation-delay, $delay-2: false, $delay-3: false, $delay-4: false, $delay-5: false, $delay-6: false, $delay-7: false, $delay-8: false, $delay-9: false, $delay-10: false) 
  $delay: compact($delay-1, $delay-2, $delay-3, $delay-4, $delay-5, $delay-6, $delay-7, $delay-8, $delay-9, $delay-10)
  @include animation-support(animation-delay, $delay) 

// Apply 1-10 animation timing functions.
@mixin animation-timing-function($function-1: $default-animation-timing-function, $function-2: false, $function-3: false, $function-4: false, $function-5: false, $function-6: false, $function-7: false, $function-8: false, $function-9: false, $function-10: false) 
  $function: compact($function-1, $function-2, $function-3, $function-4, $function-5, $function-6, $function-7, $function-8, $function-9, $function-10)
  @include animation-support(animation-timing-function, $function) 

// Apply 1-10 animation iteration counts.
@mixin animation-iteration-count($count-1: $default-animation-iteration-count, $count-2: false, $count-3: false, $count-4: false, $count-5: false, $count-6: false, $count-7: false, $count-8: false, $count-9: false, $count-10: false) 
  $count: compact($count-1, $count-2, $count-3, $count-4, $count-5, $count-6, $count-7, $count-8, $count-9, $count-10)
  @include animation-support(animation-iteration-count, $count) 

// Apply 1-10 animation directions.
@mixin animation-direction($direction-1: $default-animation-direction, $direction-2: false, $direction-3: false, $direction-4: false, $direction-5: false, $direction-6: false, $direction-7: false, $direction-8: false, $direction-9: false, $direction-10: false) 
  $direction: compact($direction-1, $direction-2, $direction-3, $direction-4, $direction-5, $direction-6, $direction-7, $direction-8, $direction-9, $direction-10)
  @include animation-support(animation-direction, $direction) 

// Apply 1-10 animation fill modes.
@mixin animation-fill-mode($mode-1: $default-animation-fill-mode, $mode-2: false, $mode-3: false, $mode-4: false, $mode-5: false, $mode-6: false, $mode-7: false, $mode-8: false, $mode-9: false, $mode-10: false) 
  $mode: compact($mode-1, $mode-2, $mode-3, $mode-4, $mode-5, $mode-6, $mode-7, $mode-8, $mode-9, $mode-10)
  @include animation-support(animation-fill-mode, $mode) 

// Apply 1-10 animation play states.
@mixin animation-play-state($state-1: $default-animation-play-state, $state-2: false, $state-3: false, $state-4: false, $state-5: false, $state-6: false, $state-7: false, $state-8: false, $state-9: false, $state-10: false) 
  $state: compact($state-1, $state-2, $state-3, $state-4, $state-5, $state-6, $state-7, $state-8, $state-9, $state-10)
  @include animation-support(animation-play-state, $state) 

// Shortcut to apply a named animation to an element, with all the settings.
//
//     $animation-1   : Name and settings for the first animation. [<values> | default]
//     ...
//     $animation-10  : Name and settings for the tenth animation. <values>
@mixin animation($animation-1: default, $animation-2: false, $animation-3: false, $animation-4: false, $animation-5: false, $animation-6: false, $animation-7: false, $animation-8: false, $animation-9: false, $animation-10: false) 
  @if $animation-1 == default 
    $animation-1: -compass-space-list(compact($default-animation-name, $default-animation-duration, $default-animation-timing-function, $default-animation-delay, $default-animation-iteration-count, $default-animation-direction, $default-animation-fill-mode, $default-animation-play-state)) 
  $animation: compact($animation-1, $animation-2, $animation-3, $animation-4, $animation-5, $animation-6, $animation-7, $animation-8, $animation-9, $animation-10)
  @include animation-support(animation, $animation) 


// keyframes mixin
=keyframes($name)
  @-webkit-keyframes #{$name}
    @content
  @-moz-keyframes #{$name}
    @content
  @-ms-keyframes #{$name}
    @content
  @-o-keyframes #{$name}
    @content
  @-khtml-keyframes #{$name}
    @content
  @keyframes #{$name}
    @content
    
@mixin no-animation()
  -o-transition-property: none !important
  -moz-transition-property: none !important
  -ms-transition-property: none !important
  -webkit-transition-property: none !important
  transition-property: none !important
  -o-transform: none !important
  -moz-transform: none !important
  -ms-transform: none !important
  -webkit-transform: none !important
  transform: none !important
  -webkit-animation: none !important
  -moz-animation: none !important
  -o-animation: none !important
  -ms-animation: none !important
  animation: none !important